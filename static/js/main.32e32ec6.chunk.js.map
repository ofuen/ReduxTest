{"version":3,"sources":["logo.svg","reducers/rotateReducer.js","store.js","actions/startAction.js","actions/stopAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","state","action","type","rotating","payload","configureStore","createStore","rotateReducer","startAction","stopAction","App","className","src","logo","this","props","alt","onClick","href","target","rel","Component","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,uKCA5B,WAACC,EAAOC,GACnB,OAAQA,EAAOC,MACX,IAAK,SACD,MAAO,CACHC,SAAUF,EAAOG,SAEzB,QACI,OAAOJ,ICFJK,MAHf,WAAqD,IAA7BL,EAA4B,uDAApB,CAAEG,UAAU,GACxC,OAAOG,YAAYC,EAAeP,I,yECHzBQ,G,MAAc,CACvBN,KAAM,SACNE,SAAS,ICFAK,EAAa,CACtBP,KAAM,SACNE,SAAS,G,gOCKPM,E,iLAEF,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBACEC,IAAKC,IACLF,UACE,YACCG,KAAKC,MAAMZ,SAAW,GAAK,oBAE9Ba,IAAI,OACJC,QACEH,KAAKC,MAAMZ,SACTW,KAAKC,MAAMN,WAAaK,KAAKC,MAAMP,cAGzC,mCACO,4CADP,wBAGA,uBACEG,UAAU,WACVO,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GApBQC,aA0CHC,cARS,SAAAtB,GAAK,O,qVAAA,IACxBA,IAEsB,SAAAuB,GAAQ,MAAK,CACtCf,YAAa,kBAAMe,EAASf,IAC5BC,WAAY,kBAAMc,EAASd,MAGda,CAA6CZ,GCrCxCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAO1B,KACb,kBAAC,EAAD,OAEJ2B,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.32e32ec6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export default (state, action) => {\r\n    switch (action.type) {\r\n        case \"rotate\":\r\n            return {\r\n                rotating: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport rotateReducer from \"reducers/rotateReducer\";\r\nfunction configureStore(state = { rotating: true }) {\r\n    return createStore(rotateReducer, state);\r\n}\r\nexport default configureStore;","export const startAction = {\r\n    type: \"rotate\",\r\n    payload: true\r\n};","export const stopAction = {\r\n    type: \"rotate\",\r\n    payload: false\r\n};","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { connect } from \"react-redux\";\r\nimport { startAction } from './actions/startAction'\r\nimport { stopAction } from './actions/stopAction'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img\r\n            src={logo}\r\n            className={\r\n              \"App-logo\" +\r\n              (this.props.rotating ? \"\" : \" App-logo-paused\")\r\n            }\r\n            alt=\"logo\"\r\n            onClick={\r\n              this.props.rotating ?\r\n                this.props.stopAction : this.props.startAction\r\n            }\r\n          />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  startAction: () => dispatch(startAction),\r\n  stopAction: () => dispatch(stopAction)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// new imports start\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"store\";\r\n// new imports stop\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// changed the render\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// changed the render\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}