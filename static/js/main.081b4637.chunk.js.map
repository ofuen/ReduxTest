{"version":3,"sources":["logo.svg","components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Posts","this","props","fetchPosts","postItems","posts","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","dispatch","fetch","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","initialState","item","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","src","logo","alt","Postform","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.081b4637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\n\r\nclass Posts extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n  \r\n  render() {\r\n    const postItems = this.props.posts.map(post => (\r\n      <div key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <p>{post.body}</p>      \r\n      </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1>Posts</h1>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStoreToProps = state => ({\r\n  posts: state.posts.items\r\n});\r\n\r\n\r\nexport default connect(mapStoreToProps, { fetchPosts })(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => res.json())\r\n            .then(posts => dispatch({\r\n               type: FETCH_POSTS, \r\n               payload: posts\r\n            })\r\n        );\r\n    };\r\n\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(post =>\r\n            dispatch({\r\n                type: NEW_POST,\r\n                payload: post\r\n            })\r\n        );\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\n\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n\r\n        // Call action\r\n        this.props.createPost(post);\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <h1>Add Post</h1>\r\n            <form onSubmit={this.onSubmit}>\r\n                <div>\r\n                <label>Title: </label><br />\r\n                <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title} />   \r\n                </div>\r\n                <br />\r\n                <div>\r\n                <label>Body: </label><br />\r\n                        <textarea name=\"body\" onChange={this.onChange} value={this.state.body} />   \r\n                </div>   \r\n                <br />\r\n                   <button type=\"submit\">Submit</button>  \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default connect(null, { createPost })(PostForm);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_POSTS:\r\n        return {\r\n            ...state,\r\n            items: action.payload\r\n        };\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        default:\r\n        return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n     applyMiddleware(...middleware),\r\n     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n    );\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport  { Provider } from 'react-redux';\r\n\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/Postform';\r\n\r\nimport store from './store';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <PostForm />\r\n          <hr />\r\n          <Posts />          \r\n        </header>\r\n      </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}